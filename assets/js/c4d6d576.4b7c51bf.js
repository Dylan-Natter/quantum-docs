"use strict";(self.webpackChunkquantum_platform_docs=self.webpackChunkquantum_platform_docs||[]).push([[1670],{4370:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"architecture/tutorial","title":"Architecture Tutorial","description":"Learn how Quantum Platform\'s architecture works through interactive examples","source":"@site/docs/architecture/tutorial.md","sourceDirName":"architecture","slug":"/architecture/tutorial","permalink":"/docs/architecture/tutorial","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/project-docs/tree/main/docs/architecture/tutorial.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Architecture Tutorial","description":"Learn how Quantum Platform\'s architecture works through interactive examples"},"sidebar":"docsSidebar","previous":{"title":"Architecture Overview","permalink":"/docs/architecture/overview"},"next":{"title":"Application Blueprint","permalink":"/docs/blueprints/application-blueprint"}}');var r=t(4848),s=t(8453);const a={sidebar_position:2,title:"Architecture Tutorial",description:"Learn how Quantum Platform's architecture works through interactive examples"},l="Quantum Platform Architecture Tutorial",o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"System Overview",id:"system-overview",level:2},{value:"Core Components",id:"core-components",level:2},{value:"1. API Gateway",id:"1-api-gateway",level:3},{value:"2. Intent Registry",id:"2-intent-registry",level:3},{value:"3. Orchestrator",id:"3-orchestrator",level:3},{value:"Data Flow",id:"data-flow",level:2},{value:"1. Intent Creation Flow",id:"1-intent-creation-flow",level:3},{value:"2. Intent Execution Flow",id:"2-intent-execution-flow",level:3},{value:"Intent Processing",id:"intent-processing",level:2},{value:"1. Intent Validation",id:"1-intent-validation",level:3},{value:"2. Execution Planning",id:"2-execution-planning",level:3},{value:"Multi-Tenant Architecture",id:"multi-tenant-architecture",level:2},{value:"1. Row-Level Security (RLS)",id:"1-row-level-security-rls",level:3},{value:"2. Attribute-Based Access Control (ABAC)",id:"2-attribute-based-access-control-abac",level:3},{value:"Security Model",id:"security-model",level:2},{value:"1. Authentication",id:"1-authentication",level:3},{value:"2. Authorization",id:"2-authorization",level:3},{value:"Hands-On Examples",id:"hands-on-examples",level:2},{value:"Example 1: Creating Your First Intent",id:"example-1-creating-your-first-intent",level:3},{value:"Example 2: Monitoring Intent Execution",id:"example-2-monitoring-intent-execution",level:3},{value:"Example 3: Multi-Tenant Intent Management",id:"example-3-multi-tenant-intent-management",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Intent Design",id:"1-intent-design",level:3},{value:"2. Error Handling",id:"2-error-handling",level:3},{value:"3. Performance",id:"3-performance",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Support",id:"support",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"quantum-platform-architecture-tutorial",children:"Quantum Platform Architecture Tutorial"})}),"\n",(0,r.jsx)(n.p,{children:"Welcome to the comprehensive architecture tutorial for Quantum Platform. This guide will walk you through the core concepts, components, and how they work together to create a powerful intent-driven orchestration system."}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#system-overview",children:"System Overview"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#core-components",children:"Core Components"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#data-flow",children:"Data Flow"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#intent-processing",children:"Intent Processing"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#multi-tenant-architecture",children:"Multi-Tenant Architecture"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#security-model",children:"Security Model"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#hands-on-examples",children:"Hands-On Examples"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"system-overview",children:"System Overview"}),"\n",(0,r.jsx)(n.p,{children:"Quantum Platform is built on a modern, cloud-native architecture that separates concerns into distinct layers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:'graph TB\n    subgraph "Client Layer"\n        Web[Web Application]\n        API[External APIs]\n        CLI[CLI Tools]\n    end\n    \n    subgraph "API Gateway"\n        Gateway[FastAPI Gateway]\n        Auth[Authentication]\n        Rate[Rate Limiting]\n    end\n    \n    subgraph "Core Services"\n        Intent[Intent Registry]\n        Orchestrator[Orchestrator]\n        Modules[Module Services]\n    end\n    \n    subgraph "Data Layer"\n        DB[(PostgreSQL)]\n        Cache[(Redis)]\n        Events[Event Hub]\n    end\n    \n    Web --\x3e Gateway\n    API --\x3e Gateway\n    CLI --\x3e Gateway\n    \n    Gateway --\x3e Auth\n    Gateway --\x3e Intent\n    Gateway --\x3e Orchestrator\n    \n    Intent --\x3e DB\n    Orchestrator --\x3e Modules\n    Orchestrator --\x3e Events\n    \n    DB --\x3e Cache\n    Modules --\x3e Events\n'})}),"\n",(0,r.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsx)(n.h3,{id:"1-api-gateway",children:"1. API Gateway"}),"\n",(0,r.jsx)(n.p,{children:"The API Gateway serves as the single entry point for all client requests."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Responsibilities:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Request routing and load balancing"}),"\n",(0,r.jsx)(n.li,{children:"Authentication and authorization"}),"\n",(0,r.jsx)(n.li,{children:"Rate limiting and throttling"}),"\n",(0,r.jsx)(n.li,{children:"Request/response transformation"}),"\n",(0,r.jsx)(n.li,{children:"OpenAPI documentation"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Request Flow:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Client makes request\nPOST /api/v1/intents\nAuthorization: Bearer <jwt_token>\nContent-Type: application/json\n\n{\n  "name": "deploy-application",\n  "definition": {\n    "target": "production",\n    "version": "1.2.3",\n    "environment": "azure-westus"\n  }\n}\n\n# Gateway processes:\n# 1. Validates JWT token\n# 2. Checks rate limits\n# 3. Routes to Intent Registry\n# 4. Returns response\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-intent-registry",children:"2. Intent Registry"}),"\n",(0,r.jsx)(n.p,{children:"The Intent Registry is the central store for all intent definitions and their versions."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Features:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Intent CRUD operations"}),"\n",(0,r.jsx)(n.li,{children:"Version management and rollback"}),"\n",(0,r.jsx)(n.li,{children:"Validation and schema enforcement"}),"\n",(0,r.jsx)(n.li,{children:"Search and discovery"}),"\n",(0,r.jsx)(n.li,{children:"Audit trail"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Intent Definition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "id": "deploy-application-v1",\n  "name": "deploy-application",\n  "version": 1,\n  "tenant_id": "tenant-123",\n  "definition": {\n    "target": "production",\n    "steps": [\n      {\n        "action": "build-container",\n        "image": "myapp:1.2.3"\n      },\n      {\n        "action": "deploy-to-kubernetes",\n        "namespace": "production"\n      },\n      {\n        "action": "verify-deployment",\n        "health_check": "/health"\n      }\n    ]\n  },\n  "status": "active",\n  "created_at": "2024-01-04T10:00:00Z"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-orchestrator",children:"3. Orchestrator"}),"\n",(0,r.jsx)(n.p,{children:"The Orchestrator is the workflow execution engine that processes intents."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Features:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Intent execution planning"}),"\n",(0,r.jsx)(n.li,{children:"Workflow orchestration"}),"\n",(0,r.jsx)(n.li,{children:"Error handling and retry logic"}),"\n",(0,r.jsx)(n.li,{children:"Progress tracking"}),"\n",(0,r.jsx)(n.li,{children:"Event publishing"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Orchestration Flow:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def execute_intent(intent_id: str, tenant_id: str):\n    # 1. Load intent definition\n    intent = await intent_registry.get(intent_id, tenant_id)\n    \n    # 2. Create execution plan\n    plan = create_execution_plan(intent.definition)\n    \n    # 3. Execute steps\n    for step in plan.steps:\n        try:\n            result = await execute_step(step)\n            await publish_event("step_completed", result)\n        except Exception as e:\n            await handle_error(step, e)\n            break\n    \n    # 4. Complete execution\n    await publish_event("intent_completed", plan.id)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,r.jsx)(n.p,{children:"Understanding how data flows through the system is crucial for effective development."}),"\n",(0,r.jsx)(n.h3,{id:"1-intent-creation-flow",children:"1. Intent Creation Flow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:'sequenceDiagram\n    participant Client\n    participant Gateway\n    participant IntentRegistry\n    participant Database\n    participant EventHub\n    \n    Client->>Gateway: POST /api/v1/intents\n    Gateway->>Gateway: Validate JWT\n    Gateway->>IntentRegistry: Create Intent\n    IntentRegistry->>Database: Store Intent\n    IntentRegistry->>EventHub: Publish "intent_created"\n    IntentRegistry->>Gateway: Return Intent ID\n    Gateway->>Client: 201 Created\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-intent-execution-flow",children:"2. Intent Execution Flow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:'sequenceDiagram\n    participant Client\n    participant Gateway\n    participant Orchestrator\n    participant Modules\n    participant EventHub\n    \n    Client->>Gateway: POST /api/v1/intents/{id}/execute\n    Gateway->>Orchestrator: Execute Intent\n    Orchestrator->>EventHub: Publish "execution_started"\n    \n    loop For each step\n        Orchestrator->>Modules: Execute Step\n        Modules->>Orchestrator: Return Result\n        Orchestrator->>EventHub: Publish "step_completed"\n    end\n    \n    Orchestrator->>EventHub: Publish "execution_completed"\n    Orchestrator->>Gateway: Return Execution ID\n    Gateway->>Client: 202 Accepted\n'})}),"\n",(0,r.jsx)(n.h2,{id:"intent-processing",children:"Intent Processing"}),"\n",(0,r.jsx)(n.p,{children:"Intents are processed through a sophisticated pipeline that ensures reliability and scalability."}),"\n",(0,r.jsx)(n.h3,{id:"1-intent-validation",children:"1. Intent Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class IntentValidator:\n    def validate(self, intent: IntentDefinition) -> ValidationResult:\n        # Schema validation\n        schema_result = self.validate_schema(intent.definition)\n        if not schema_result.valid:\n            return ValidationResult(valid=False, errors=schema_result.errors)\n        \n        # Business logic validation\n        business_result = self.validate_business_rules(intent)\n        if not business_result.valid:\n            return ValidationResult(valid=False, errors=business_result.errors)\n        \n        # Security validation\n        security_result = self.validate_security(intent)\n        if not security_result.valid:\n            return ValidationResult(valid=False, errors=security_result.errors)\n        \n        return ValidationResult(valid=True)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-execution-planning",children:"2. Execution Planning"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class ExecutionPlanner:\n    def create_plan(self, intent: IntentDefinition) -> ExecutionPlan:\n        plan = ExecutionPlan(intent_id=intent.id)\n        \n        for step_definition in intent.definition.steps:\n            step = ExecutionStep(\n                action=step_definition.action,\n                parameters=step_definition.parameters,\n                dependencies=self.calculate_dependencies(step_definition),\n                timeout=step_definition.timeout or 300\n            )\n            plan.add_step(step)\n        \n        return plan\n"})}),"\n",(0,r.jsx)(n.h2,{id:"multi-tenant-architecture",children:"Multi-Tenant Architecture"}),"\n",(0,r.jsx)(n.p,{children:"Quantum Platform provides enterprise-grade tenant isolation through multiple layers."}),"\n",(0,r.jsx)(n.h3,{id:"1-row-level-security-rls",children:"1. Row-Level Security (RLS)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Enable RLS on intents table\nALTER TABLE intents ENABLE ROW LEVEL SECURITY;\n\n-- Create policy for tenant isolation\nCREATE POLICY tenant_isolation ON intents\n    FOR ALL TO app_user\n    USING (tenant_id = current_setting('app.current_tenant_id')::uuid);\n\n-- Set tenant context\nSET app.current_tenant_id = 'tenant-123';\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-attribute-based-access-control-abac",children:"2. Attribute-Based Access Control (ABAC)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class ABACPolicy:\n    def check_permission(self, user: User, resource: Resource, action: str) -> bool:\n        # Get user attributes\n        user_attrs = self.get_user_attributes(user)\n        \n        # Get resource attributes\n        resource_attrs = self.get_resource_attributes(resource)\n        \n        # Evaluate policy\n        return self.evaluate_policy(user_attrs, resource_attrs, action)\n\n# Example policy evaluation\npolicy = ABACPolicy()\ncan_execute = policy.check_permission(\n    user=user,\n    resource=intent,\n    action="execute"\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"security-model",children:"Security Model"}),"\n",(0,r.jsx)(n.p,{children:"Quantum Platform implements a comprehensive security model with multiple layers of protection."}),"\n",(0,r.jsx)(n.h3,{id:"1-authentication",children:"1. Authentication"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class AuthenticationService:\n    async def authenticate(self, token: str) -> User:\n        # Validate JWT token\n        payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])\n        \n        # Check token expiration\n        if payload["exp"] < time.time():\n            raise AuthenticationError("Token expired")\n        \n        # Get user from database\n        user = await self.get_user(payload["user_id"])\n        if not user:\n            raise AuthenticationError("User not found")\n        \n        return user\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-authorization",children:"2. Authorization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class AuthorizationService:\n    def check_permission(self, user: User, resource: str, action: str) -> bool:\n        # Check role-based permissions\n        if self.has_role_permission(user, resource, action):\n            return True\n        \n        # Check attribute-based permissions\n        if self.has_abac_permission(user, resource, action):\n            return True\n        \n        return False\n"})}),"\n",(0,r.jsx)(n.h2,{id:"hands-on-examples",children:"Hands-On Examples"}),"\n",(0,r.jsx)(n.h3,{id:"example-1-creating-your-first-intent",children:"Example 1: Creating Your First Intent"}),"\n",(0,r.jsx)(n.p,{children:"Let's create a simple intent that deploys an application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# 1. Define the intent\nintent_definition = {\n    "name": "deploy-web-app",\n    "definition": {\n        "target": "production",\n        "steps": [\n            {\n                "action": "build-docker-image",\n                "image": "myapp:latest",\n                "context": "./app"\n            },\n            {\n                "action": "push-to-registry",\n                "registry": "azurecr.io",\n                "image": "myapp:latest"\n            },\n            {\n                "action": "deploy-to-kubernetes",\n                "namespace": "production",\n                "replicas": 3\n            }\n        ]\n    }\n}\n\n# 2. Create the intent\nresponse = await client.post("/api/v1/intents", json=intent_definition)\nintent_id = response.json()["id"]\n\n# 3. Execute the intent\nexecution = await client.post(f"/api/v1/intents/{intent_id}/execute")\nexecution_id = execution.json()["execution_id"]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example-2-monitoring-intent-execution",children:"Example 2: Monitoring Intent Execution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Monitor execution progress\nasync def monitor_execution(execution_id: str):\n    async for event in client.stream(f"/api/v1/executions/{execution_id}/events"):\n        if event["type"] == "step_completed":\n            print(f"Step {event[\'step\']} completed: {event[\'result\']}")\n        elif event["type"] == "execution_completed":\n            print(f"Execution {execution_id} completed successfully")\n            break\n        elif event["type"] == "execution_failed":\n            print(f"Execution {execution_id} failed: {event[\'error\']}")\n            break\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example-3-multi-tenant-intent-management",children:"Example 3: Multi-Tenant Intent Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Switch tenant context\nclient.set_tenant("tenant-123")\n\n# Create intent for specific tenant\nintent = await client.post("/api/v1/intents", json=intent_definition)\n\n# List intents for current tenant\nintents = await client.get("/api/v1/intents")\n\n# Execute intent (automatically scoped to tenant)\nexecution = await client.post(f"/api/v1/intents/{intent[\'id\']}/execute")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-intent-design",children:"1. Intent Design"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Keep intents focused"}),": Each intent should have a single, clear purpose"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use descriptive names"}),": Intent names should clearly indicate their purpose"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Version your intents"}),": Always version your intent definitions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test thoroughly"}),": Test intents in development before production"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-error-handling",children:"2. Error Handling"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implement retries"}),": Use exponential backoff for transient failures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Log everything"}),": Comprehensive logging helps with debugging"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Graceful degradation"}),": Handle partial failures gracefully"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor execution"}),": Set up alerts for failed executions"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-performance",children:"3. Performance"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optimize queries"}),": Use proper indexing and query optimization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cache frequently"}),": Cache frequently accessed data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Batch operations"}),": Batch multiple operations when possible"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor metrics"}),": Track performance metrics and optimize accordingly"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you understand the architecture, here's what to explore next:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Try the Quick Start Guide"}),": Get hands-on experience with the platform"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explore the API Reference"}),": Learn about all available endpoints"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Read the Design System"}),": Understand the UI/UX guidelines"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check out the Blueprints"}),": See real-world application examples"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"support",children:"Support"}),"\n",(0,r.jsx)(n.p,{children:"Need help with the architecture or have questions?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"}),": ",(0,r.jsx)(n.a,{href:"/docs/api-reference/overview",children:"Complete API Reference"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GitHub"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/centrex-ai/quantum-platform",children:"View Source Code"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Issues"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/centrex-ai/quantum-platform/issues",children:"Report Issues"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Discussions"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/centrex-ai/quantum-platform/discussions",children:"Community Discussions"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.em,{children:["This tutorial is part of the Quantum Platform documentation. For the latest updates, visit our ",(0,r.jsx)(n.a,{href:"https://github.com/centrex-ai/quantum-platform-docs",children:"GitHub repository"}),"."]})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);